using System;
using System.Data;
using System.Reflection;

namespace Csorm2.Core.Metadata
{
    /// <summary>
    /// Represents both a c# property and the Database column generated by it
    /// </summary>
    public class Attribute
    {
        public Attribute(
            Type clrType,
            string name,
            string dataBaseColumn,
            PropertyInfo propertyInfo,
            DbType? databaseType,
            bool isAutoInc)
        {
            ClrType = clrType;
            Name = name;
            DataBaseColumn = dataBaseColumn;
            PropertyInfo = propertyInfo;
            DatabaseType = databaseType;
            IsAutoInc = isAutoInc;
        }
        
        /// <summary>
        /// Gets the entity this attribute is declared int
        /// </summary>
        public Entity DeclaredIn { get; set; }
        /// <summary>
        /// The C# type of the property
        /// </summary>
        public Type ClrType { get; }
        /// <summary>
        /// Name of the attribute generally the c# property name 
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// C# Property name
        /// </summary>
        public string PropertyName => PropertyInfo?.Name;

        /// <summary>
        /// Database Column field
        /// </summary>
        public string DataBaseColumn { get; }

        // if we dont have a backing field the attribute is a shadow property and we
        // cant simply look into the type to get its value
        public PropertyInfo PropertyInfo { get; } = null;

        public object InvokeGetter(object _this) =>
            (PropertyInfo ?? throw new Exception("tried to invoke getter on shadow attribute"))
                .GetMethod.Invoke(_this,    new object[0]);
        
        public object InvokeSetter(object _this, object value) =>
            (PropertyInfo ?? throw new Exception("tried to invoke setter on shadow attribute"))
            .SetMethod.Invoke(_this, new []{value});

        public bool IsShadowAttribute => PropertyInfo == null;

        // if we cant find a matching dbType only other entities are valid
        public DbType? DatabaseType { get; }
        public bool IsEntityType => DatabaseType == null;
        /// <summary>
        /// Relation object this attribute is part of
        /// </summary>
        public IRelation Relation { get; set; } = null;
        /// <summary>
        /// Indicates whether this attribute is generate by the database on insertion 
        /// </summary>
        public bool IsAutoInc { get; set; } = false;
    }
}